install.packages('neuralnets')
install.packages('neuralnet')
library("neuralnet")
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result), sqrt(testdata)-as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output","diff")
print(cleanoutput)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=1, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=1, threshold=0.01)
print(net.sqrt)
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=1, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result), sqrt(testdata)-as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output","diff")
print(cleanoutput)
#library("neuralnet")
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result), sqrt(testdata)-as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output","diff")
print(cleanoutput)
help(neuralnet)
as.data.frame(runif(50, min=0, max=100))
sqrt(traininginput)
cbind(traininginput,trainingoutput)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result), sqrt(testdata)-as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output","diff")
print(cleanoutput)
install.packages("leaflet")
devtools::install_github("rstudio/leaflet")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=19, lat=-99, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=21, lat=-87, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=21, lat=-87)
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
source('~/ISW/PRUEBAS R/MAPAS/ui.R')
install.packages("shiny")
library(shiny)
library(rCharts)
library(ggplot2)
library(leaflet)
shinyUI(bootstrapPage(
headerPanel("test"),
mainPanel(
tabsetPanel(
tabPanel("map2", tags$style('.leaflet {height: 400px;}'),showOutput('myChart', 'leaflet'))
)
)
))
aaa <- read.table('clipboard')
hist(aaa)
aaa
hist(aaa)
hist(as.numeric(aaa))
hist(aaa$V1)
X11()
hist(aaa$V1)
hist(aaa$V1)
hist(aaa$V1)
hist(aaa$V1,100)
hist(aaa$V1[aaa$V1>0],100)
hist(aaa$V1[aaa$V1>0],200)
hist(aaa$V1[aaa$V1>0],100)
hist(aaa$V1[aaa$V1>0],100)
hist(aaa$V1[aaa$V1>0],200)
?read.xls
cubo <- odbcConnect(dsn = "syscubo", uid = "bmxddt004783", pwd = "Cyclone003")
library(knitr)
library(RODBC)
library(ggfortify)
library(magrittr)
library(reshape2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
cubo <- odbcConnect(dsn = "syscubo", uid = "bmxddt004783", pwd = "Cyclone003")
l2b <- sqlQuery(channel= cubo,query =
"select  FechaIn
,Clav_Hotel
,sum(Eventos) Visitas
from bi_looktobook with(nolock)
where FechaCorrecta = 1
and getdate() <= FechaIn
group by FechaIn,Clav_Hotel")
l2b$FechaIn %<>% ymd()
Sys.setenv(TZ = "Mexico/General")
l2b$FechaIn %<>% ymd()
head(l2b)
Sys.getenv(TZ)
Sys.getenv("TZ")
?ymd
Sys.getlocale()
Sys.getlocale("LC_TIME")
l2b <- sqlQuery(channel= cubo,query =
"select  FechaIn
,Clav_Hotel
,sum(Eventos) Visitas
from bi_looktobook with(nolock)
where FechaCorrecta = 1
and getdate() <= FechaIn
group by FechaIn,Clav_Hotel")
head(l2b)
aaa<-l2b$FechaIn
aaa
ymd(aaa)
l2b$FechaIn %<>% ymd(tz = "Mexico/General")
cbind(aaa,l2b$FechaIn)
cbind(aaa,l2b$FechaIn) %>% head
l2b <- sqlQuery(channel= cubo,query =
"select  FechaIn
,Clav_Hotel
,sum(Eventos) Visitas
from bi_looktobook with(nolock)
where FechaCorrecta = 1
and getdate() <= FechaIn
group by FechaIn,Clav_Hotel")
cbind(aaa,l2b$FechaIn) %>% head
head(aaa)
cbind(aaa,l2b$FechaIn) %>% head
ymd(aaa) %>% head
l2b$FechaIn %<>% ymd()
head(l2b)
l2b <- sqlQuery(channel= cubo,query =
"select  FechaIn
,Clav_Hotel
,sum(Eventos) Visitas
from bi_looktobook with(nolock)
where FechaCorrecta = 1
and getdate() <= FechaIn
group by FechaIn,Clav_Hotel")
aaa<- ymd(l2b$FechaIn)
head(aaa)
as.POSIXct(l2b$FechaIn)
as.POSIXct(l2b$FechaIn) %>% head
as.POSIXit.POSIXct(l2b$FechaIn) %>% head
l2b$FechaIn %>% ymd()
as.POSIXlt.POSIXct(l2b$FechaIn) %>% head
l2b$FechaIn %>% ymd()
Sys.setlocale("America/Cancun")
Sys.setenv(... =
Sys.setenv(TZ = "America/Cancun")
l2b$FechaIn %>% ymd()
Sys.setenv(TZ = "America/Cancun")
l2b$FechaIn %>% ymd()
library(knitr)
library(RODBC)
library(ggfortify)
library(magrittr)
library(reshape2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
cubo <- odbcConnect(dsn = "syscubo", uid = "bmxddt004783", pwd = "Cyclone003")
l2b <- sqlQuery(channel= cubo,query =
"select  FechaIn
,Clav_Hotel
,sum(Eventos) Visitas
from bi_looktobook with(nolock)
where FechaCorrecta = 1
and FechaIn >= getdate()
group by FechaIn,Clav_Hotel")
ymd("2015-08-04")
Sys.setenv(TZ = "EST")
ymd("2015-08-04")
Sys.getenv("TZ")
ymd("2015-08-04")
setwd("~/ISW/ETC/Proyectitos/Coursera/DataProducts")
library(leaflet)
library(dplyr)
library(ggplot2)
hur <- read.csv(file = "hurdataLL.csv")
hur2014 <- filter(hur,Date>=20140000)
m <- leaflet() %>% addTiles()
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=hur2014$Lo,lat=hur2014$Lat)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=hur2014$Lat,lat=hur2014$Lo)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=hur2014$Lo,lat=hur2014$Lat)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=hur2014$Lo,lat=-hur2014$Lat)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=-hur2014$Lo,lat=hur2014$Lat)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=hur2014$Lo,lat=hur2014$Lat)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=-hur2014$Lo,lat=hur2014$Lat)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=-hur2014$Lo,lat=hur2014$Lat,popup=hur2014$Name)
m
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=-hur2014$Lo,lat=hur2014$Lat,popup=hur2014$Name,colorBin=hur2014$Hour)
pal <- colorFactor(domain=unique(hur2014$Hurclass))
pal <- colorNumeric(domain=unique(hur2014$Hurclass))
pal <- colorFactor(palette = "Blues",levels=unique(hur2014$Hurclass))
addMarkers(lng=-hur2014$Lo,lat=hur2014$Lat,popup=hur2014$Name,color=~pal(hur2014$Hurclass))
m <- leaflet() %>% addTiles() %>%
addMarkers(lng=-hur2014$Lo,lat=hur2014$Lat,popup=hur2014$Name,color=~pal(hur2014$Hurclass))
addCircleMarkers(lng=-hur2014$Lo,lat=hur2014$Lat,popup=hur2014$Name,color=~pal(hur2014$Hurclass))
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,lat=hur2014$Lat,popup=hur2014$Name,color=~pal(hur2014$Hurclass))
pal <- colorFactor(palette = "Blues",levels=unique(hur2014$Hurclass))
pal
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name)
m
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE)
m
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE,
fillOpacity = 0.2)
m
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE,
fillOpacity = 0.1)
m
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE,
fillOpacity = 0.9)
m
pal <- colorFactor(palette = "Blues",levels=unique(hur2014$Hurclass))
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE,
fillOpacity = 0.8,
color=~pal(hur2014$Hurclass)
)
hur2014$Hurclass%>% head
unique(hur2014$Hurclass)
pal
pal("DB"
)
pal("DB")
unique(hur2014$Hurclass)
levels(hur2014$Hurclass)
pal <- colorFactor(palette = "Blues",levels=levels(hur2014$Hurclass))
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE,
fillOpacity = 0.8,
color=~pal(hur2014$Hurclass)
)
pal <- colorFactor(palette = "Blues",levels=levels(hur2014$Hurclass))
pal <- colorFactor(palette = "Blues",domain=levels(hur2014$Hurclass))
m <- leaflet() %>% addTiles() %>%
addCircleMarkers(lng=-hur2014$Lo,
lat=hur2014$Lat,
popup=hur2014$Name,
stroke= FALSE,
fillOpacity = 0.8,
color=~pal(hur2014$Hurclass)
)
m
levels(hur2014$Hurclass)
